"""
Django settings for Main project.

Generated by 'django-admin startproject' using Django 5.1.1.
"""

from pathlib import Path
import os
import sys

# --- BASE_DIR (unificado, no lo redefinas más abajo) ---
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = 'administracion.Usuario'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8io^32_+@-bwm(q8@jdflu^^6-_btdevo5p%1uc%l*od_70i=2'
# TIP: en producción, usá variables de entorno.

# la url utilizada
SITE_URL = "http://127.0.0.1:8000"
# SITE_URL = "https://tcc25.myqnapcloud.com"

DEBUG = True
ALLOWED_HOSTS = ['*']

# ==========================================
# CONFIGURACIÓN DE APIS MOCK/EXTERNAS
# ==========================================
# Cambiar USE_MOCK_APIS a False en producción para usar APIs reales
USE_MOCK_APIS = True

base_url_api = "http://localhost:8000/api/"
STOCK_API_BASE_URL = "http://localhost:8000" 
LOGISTICA_API_BASE_URL= "http://localhost:8000"

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Requerido por allauth

    # Apps del proyecto
    'apps.modulos.inicio',
    'apps.modulos.administracion',
    'apps.modulos.login',
    'apps.modulos.pedidos',

    # APIs internas
    'apps.apis.carritoApi',
    'apps.apis.productoApi',
    'apps.apis.pedidoApi',
    
    # Django REST Framework
    'rest_framework',
    'drf_spectacular',  # Swagger/OpenAPI
    
    # Aplicaciones allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Opcionalmente crispy-forms
    'crispy_forms',
]

SITE_ID = 1



AUTHENTICATION_BACKENDS = [
    # 'apps.login.backends.EmailBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # <-- primero esto
    'Main.middleware_request_id.RequestContextMiddleware',      # <-- y recién después el nuestro
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]


ROOT_URLCONF = 'Main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Main.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

SECURE_SSL_REDIRECT = False

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'es'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static & Media (usando BASE_DIR Path)
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# ====================================
# Configuración de Django REST Framework
# ====================================
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

CSRF_TRUSTED_ORIGINS = [
    'https://tcc25.myqnapcloud.com',
    'http://0.0.0.0:8000'
]

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

# Configuracion de correo (TIP: mover a variables de entorno en prod)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

SOCIALACCOUNT_ADAPTER = "apps.login.adapters.MySocialAccountAdapter"

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'max.prueba.200@gmail.com'  # Tu dirección de correo electrónico personal
EMAIL_HOST_PASSWORD = 'dbcasxwvzgedgicp'  # La contraseña de tu cuenta de correo electrónico


# ====================================
# Configuración de DRF Spectacular (Swagger/OpenAPI)
# ====================================
SPECTACULAR_SETTINGS = {
    'TITLE': 'DesarrolloAPP - API Mock Documentation',
    'DESCRIPTION': 'Documentación completa de las APIs Mock de Stock y Logística para desarrollo y testing',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': r'/api',
    
    # Configuración de UI
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'defaultModelsExpandDepth': 2,
        'defaultModelExpandDepth': 2,
        'displayRequestDuration': True,
    },
    
    # Ordenamiento de endpoints
    'SORT_OPERATIONS': True,
    
    # Tags para organizar endpoints
    'TAGS': [
        {'name': 'Stock Mock', 'description': 'Operaciones de gestión de stock y productos'},
        {'name': 'Logística Mock', 'description': 'Operaciones de envíos y transporte'},
        {'name': 'Productos', 'description': 'API de productos (consume Stock)'},
    ],
}

SOCIALACCOUNT_ADAPTER = "apps.login.adapters.MySocialAccountAdapter"

# Logging: enviar únicamente a consola (stdout) durante desarrollo
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "%(asctime)s %(levelname)s %(name)s %(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "stream": "ext://sys.stdout",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "apps.modulos.inicio": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
        "apps.apis.stockApi": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
    },
}